// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// schema.prisma

// User model
model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  role     String   @default("USER")
  basket   Basket?
  ratings  Rating[]
}

// Basket model
model Basket {
  id          Int            @id @default(autoincrement())
  userId      Int            @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user        User           @relation(fields: [userId], references: [id])
  basketItems BasketDevice[]
}

// BasketDevice model
model BasketDevice {
  id       Int    @id @default(autoincrement())
  basketId Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  basket   Basket @relation(fields: [basketId], references: [id])
  deviceId Int
  device   Device @relation(fields: [deviceId], references: [id])
}

// Device model
model Device {
  id          Int            @id @default(autoincrement())
  name        String         @unique @map(name: "name") @db.VarChar(255)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  price       Int
  rating      Int            @default(0)
  img         String
  typeId      Int
  brandId     Int
  type        Type           @relation(fields: [typeId], references: [id])
  brand       Brand          @relation(fields: [brandId], references: [id])
  ratings     Rating[]
  basketItems BasketDevice[]
  deviceInfo  DeviceInfo[]
}

// Type model
model Type {
  id        Int         @id @default(autoincrement())
  name      String      @unique @map(name: "name") @db.VarChar(255)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  devices   Device[]
  brands    Brand[]
  TypeBrand TypeBrand[]
}

// Brand model
model Brand {
  id        Int         @id @default(autoincrement())
  name      String      @unique @map(name: "name") @db.VarChar(255)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  devices   Device[]
  types     Type[]
  TypeBrand TypeBrand[]
}

// Rating model
model Rating {
  id       Int    @id @default(autoincrement())
  rate     Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userId   Int
  deviceId Int
  user     User   @relation(fields: [userId], references: [id])
  device   Device @relation(fields: [deviceId], references: [id])
}

// DeviceInfo model
model DeviceInfo {
  id          Int    @id @default(autoincrement())
  title       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  description String
  deviceId    Int
  device      Device @relation(fields: [deviceId], references: [id])
}

// TypeBrand model
model TypeBrand {
  typeId  Int   @id
  brandId Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  type    Type  @relation(fields: [typeId], references: [id])
  brand   Brand @relation(fields: [brandId], references: [id])
}
